--// Services
local Players           = cloneref(game:GetService('Players'))
local ReplicatedStorage = cloneref(game:GetService('ReplicatedStorage'))
local RunService        = cloneref(game:GetService('RunService'))
local GuiService        = cloneref(game:GetService('GuiService'))
local TweenService      = cloneref(game:GetService('TweenService'))

--// Variables
local flags       = {
    ['CurrentBox'] = nil
}
local lp          = Players.LocalPlayer
local openbox     = ReplicatedStorage.RemoteEvents.BoxEvent
local boxes       = workspace.BoxPositions
local killauracon = nil
local boxfarmcon  = nil
local boxauracon  = nil

--// Functions
FindChildOfClass = function(parent, classname)
    return parent:FindFirstChildOfClass(classname)
end
FindChild = function(parent, child)
    return parent:FindFirstChild(child)
end
FindChildOfType = function(parent, childname, classname)
    child = parent:FindFirstChild(childname)
    if child and child.ClassName == classname then
        return child
    end
end
CheckFunc = function(func)
    return typeof(func) == 'function'
end

--// Custom Functions
getchar = function()
    return lp.Character or lp.CharacterAdded:Wait()
end
gethrp = function()
    return getchar():WaitForChild('HumanoidRootPart')
end
gethum = function()
    return getchar():WaitForChild('Humanoid')
end
findweapon = function()
    weapon = FindChildOfClass(getchar(), 'Tool')
    if weapon then return weapon end
end
noclip = function(yes)
    if lp and lp.Character then
        for i,v in lp.Character:GetChildren() do
            if v:IsA('BasePart') then
                v.CanCollide = yes
            end
        end
    end
end
setupkillaura = function()
    killauracon = RunService.Heartbeat:Connect(function()
        if flags['hitaura'] then
            if lp.Character and FindChild(getchar(), 'HumanoidRootPart') then
                local weapon = findweapon()
                if weapon then
                    for i,v in pairs(Players:GetPlayers()) do 
                        if v ~= lp and v.Character and FindChild(v.Character, 'Humanoid') and FindChild(v.Character, 'HumanoidRootPart') and (v.Character['HumanoidRootPart'].Position - lp.Character['HumanoidRootPart'].Position).Magnitude <= 35 then
                            weapon.Events.Hit:FireServer(v.Character['Humanoid'])
                        end
                    end
                end
            end
        end
    end)
end
setupboxaura = function()
    if boxauracon then boxauracon:Disconnect() end
    boxauracon = RunService.Heartbeat:Connect(function()
        if flags['boxaura'] then
            for i,v in boxes:GetDescendants() do
                if (v.Name == 'Common' or v.Name == 'Uncommon' or v.Name == 'Rare' or v.Name == 'Epic' or v.Name == 'Legendary') and v:IsA('Model') then
                    if not (lp.Character and FindChild(lp.Character, 'HumanoidRootPart')) then return end
                    local particlePart = FindChild(v, 'ParticlePart')
                    if not particlePart then return end

                    local distance = (particlePart.CFrame.Position - lp.Character.HumanoidRootPart.Position).Magnitude
                    if distance <= 10 then
                        openbox:FireServer(v)
                    end
                end
            end
        end
    end)
end
setupboxfarm = function()
    if boxfarmcon then boxfarmcon:Disconnect() end
    boxfarmcon = RunService.Heartbeat:Connect(function()
        if flags['boxautofarm'] and lp.Character and FindChild(getchar(), 'HumanoidRootPart') then
            for i,v in boxes:GetDescendants() do
                if (v.Name == 'Common' or v.Name == 'Uncommon' or v.Name == 'Rare' or v.Name == 'Epic' or v.Name == 'Legendary' or v.Name == 'Mythical') and v:IsA('Model') and flags['boxautofarm'] and v == flags['currentBox'] or ((v.Name == 'Mythical' or v.Name == 'Legendary' or (v.Name == 'Epic' and not flags['currentBox']) or (v.Name == 'Rare' and not flags['currentBox']) or (v.Name == 'Uncommon' and not flags['currentBox']) or (v.Name == 'Common' and not flags['currentBox']))) then
                    if not (lp.Character and FindChild(lp.Character, 'HumanoidRootPart')) then return end
                    local particlePart = FindChild(v, 'ParticlePart')
                    if not particlePart then return end

                    local distance = (particlePart.CFrame.Position - lp.Character.HumanoidRootPart.Position).Magnitude
                    local distancefromspawn = (Vector3.new(-120.23885345458984, -85.00001525878906, -640.92919921875) - lp.Character.HumanoidRootPart.Position).Magnitude
                    flags['currentBox'] = v
                    if distance <= 10 then
                        openbox:FireServer(v)
                        flags['currentBox'] = nil
                    elseif distance > 10 and v and particlePart and particlePart.Position.Y > -82 and (distancefromspawn <= 350 or distance < 1000) then
                        time = distance / 150
                        workspace.Gravity = 0
                        noclip(false)
                        local tween = TweenService:Create(lp.Character.HumanoidRootPart, TweenInfo.new(time, Enum.EasingStyle.Linear), {CFrame = particlePart.CFrame})
                        tween:Play()
                        
                        task.delay(time, function() 
                            if not (lp.Character and FindChild(lp.Character, 'HumanoidRootPart')) then
                                tween:Cancel()
                                workspace.Gravity = 196.2
                                flags['currentBox'] = nil
                                return
                            end
                            workspace.Gravity = 196.2
                            local distance2 = (particlePart.CFrame.Position - lp.Character.HumanoidRootPart.Position).Magnitude
                            if distance2 <= 10 then
                                openbox:FireServer(v)
                                flags['currentBox'] = nil
                            end
                        end)
                    end
                end
            end
        end
    end)
end

--// UI
local library
if CheckFunc(makefolder) and (CheckFunc(isfolder) and not isfolder('Azure Hub')) then
    makefolder('Azure Hub')
end
if CheckFunc(writefile) and (CheckFunc(isfile) and not isfile('Azure Hub/library.lua')) then
    writefile('Azure Hub/library.lua', game:HttpGet('https://github.com/xataxell/azure-hub/blob/main/library.lua?raw=true'))
end
if CheckFunc(loadfile) then
    library = loadfile('Azure Hub/library.lua')()
else
    library = loadstring(game:HttpGet('https://github.com/xataxell/azure-hub/blob/main/library.lua?raw=true'))()
end
local Combat = library:CreateWindow('Combat')
local Autofarm = library:CreateWindow('Autofarm')
Combat:Toggle('Hit Aura', {location = flags, flag = 'hitaura'}, function()
    if killauracon then killauracon:Disconnect() end
    setupkillaura()
    lp.CharacterAdded:Connect(function() if killauracon then killauracon:Disconnect() end task.delay(1, function() setupkillaura() end) end)
end)
Autofarm:Toggle('Box Farm', {location = flags, flag = 'boxautofarm'}, function()
    if boxfarmcon then boxfarmcon:Disconnect() end
    flags['currentBox'] = nil
    noclip(true)
    setupboxfarm()
    lp.CharacterAdded:Connect(function() 
        flags['currentBox'] = nil
        noclip(true)
        if boxfarmcon then boxfarmcon:Disconnect() end
        task.delay(1, function()
            setupboxfarm()
        end)
    end)
end)
Autofarm:Toggle('Box Aura', {location = flags, flag = 'boxaura'}, function()
    if boxauracon then boxauracon:Disconnect() end
    setupboxaura()
    lp.CharacterAdded:Connect(function() if boxauracon then boxauracon:Disconnect() end task.delay(1, function() setupboxaura() end) end)
end)
